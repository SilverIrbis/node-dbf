// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Header, HeaderFPT, Parser, fs, iconv,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  Header = require('./header');

  HeaderFPT = require('./header_fpt');

  fs = require('fs');

  iconv = require('iconv-lite');

  Parser = (function(_super) {
    __extends(Parser, _super);

    function Parser(filename, encoding, fpt_filename) {
      var base_filename;
      this.filename = filename;
      this.encoding = encoding != null ? encoding : 'utf-8';
      this.fpt_filename = fpt_filename;
      this.parseField = __bind(this.parseField, this);
      this.parseMemoRecord = __bind(this.parseMemoRecord, this);
      this.parseRecord = __bind(this.parseRecord, this);
      this.parse = __bind(this.parse, this);
      if (!this.fpt_filename) {
        base_filename = this.filename.split('.dbf')[0];
        this.fpt_filename = "" + base_filename + ".fpt";
      }
    }

    Parser.prototype.parse = function() {
      this.emit('start', this);
      this.header = new Header(this.filename, this.encoding);
      fs.exists(this.fpt_filename, (function(_this) {
        return function(exists) {
          if (exists) {
            _this.header_fpt = new HeaderFPT(_this.fpt_filename, _this.encoding);
            _this.header_fpt.parse(function(err) {});
            _this.emit('header_fpt', _this.header_fpt);
            return _this.fpt_buffer = fs.readFileSync(_this.fpt_filename);
          }
        };
      })(this));
      this.header.parse((function(_this) {
        return function(err) {
          var sequenceNumber;
          _this.emit('header', _this.header);
          sequenceNumber = 0;
          return fs.readFile(_this.filename, function(err, buffer) {
            var loc;
            if (err) {
              throw err;
            }
            loc = _this.header.start;
            while (loc < (_this.header.start + _this.header.numberOfRecords * _this.header.recordLength) && loc < buffer.length) {
              _this.emit('record', _this.parseRecord(++sequenceNumber, buffer.slice(loc, loc += _this.header.recordLength)));
            }
            return _this.emit('end', _this);
          });
        };
      })(this));
      return this;
    };

    Parser.prototype.parseRecord = function(sequenceNumber, buffer) {
      var field, loc, record, _fn, _i, _len, _ref;
      record = {
        '@sequenceNumber': sequenceNumber,
        '@deleted': (buffer.slice(0, 1))[0] !== 32
      };
      loc = 1;
      _ref = this.header.fields;
      _fn = (function(_this) {
        return function(field) {
          return record[field.name] = _this.parseField(field, buffer.slice(loc, loc += field.length));
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        _fn(field);
      }
      return record;
    };

    Parser.prototype.parseMemoRecord = function(block_position) {
      var block_header_end, block_header_start, block_size, end, start;
      if (block_position > this.header_fpt.nextFreeBlock) {
        return '';
      }
      block_header_start = block_position * this.header_fpt.memoSingleBlockLength;
      block_header_end = block_header_start + 8;
      block_size = this.fpt_buffer.slice(block_header_start + 4, block_header_end).readInt32BE(0, true);
      if (block_size === 0 || void 0 || block_size > 2048) {
        return '';
      }
      start = block_header_end;
      end = start + block_size;
      if (end > this.fpt_buffer.length) {
        return '';
      }
      return (iconv.decode(this.fpt_buffer.slice(start, end), this.encoding)).trim();
    };

    Parser.prototype.parseField = function(field, buffer) {
      var block_position, day, month, value, year;
      value = (iconv.decode(buffer, this.encoding)).trim();
      switch (field.type) {
        case 'M':
          if (!this.header_fpt) {
            throw new Error("Memo field was specified but related .FPT file (" + this.fpt_filename + ") was not found for " + this.filename + ".");
          }
          block_position = buffer.readInt32LE(0, true);
          if (block_position === 0) {
            value = '';
          } else {
            value = this.parseMemoRecord(block_position);
          }
          break;
        case 'N':
          value = parseFloat(value);
          break;
        case 'L':
          value = value === 1;
          break;
        case 'D':
          if (value) {
            year = parseInt(value.slice(0, 4));
            month = parseInt(value.slice(4, 6)) - 1;
            day = parseInt(value.slice(6, 8));
            value = new Date(year, month, day);
          } else {
            value = '';
          }
          break;
        default:
          value;
      }
      return value;
    };

    return Parser;

  })(EventEmitter);

  module.exports = Parser;

}).call(this);
